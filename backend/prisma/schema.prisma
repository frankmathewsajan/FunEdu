// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String
  class             String?
  contact           String?
  organization      String?
  profilePicture    String?
  isEmailVerified   Boolean  @default(false)
  emailVerificationToken String?
  resetPasswordToken String?
  resetPasswordExpires   DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // User statistics
  userStats         UserStats?
  
  // Relations
  enrollments       Enrollment[]
  activities        Activity[]
  achievements      Achievement[]
  gameScores        GameScore[]
  
  @@map("users")
}

model UserStats {
  id                  String @id @default(cuid())
  userId              String @unique
  totalLectures       Int    @default(0)
  completedLectures   Int    @default(0)
  totalPoints         Int    @default(0)
  currentLevel        Int    @default(1)
  pointsToNextLevel   Int    @default(500)
  streakDays          Int    @default(0)
  lastActivityDate    DateTime?
  
  user                User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_stats")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String
  thumbnail   String?
  category    String
  difficulty  String   @default("beginner") // beginner, intermediate, advanced
  duration    Int?     // in minutes
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons     Lesson[]
  enrollments Enrollment[]
  
  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  content     String
  videoUrl    String?
  duration    Int?     // in minutes
  order       Int
  points      Int      @default(10)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  activities  Activity[]
  
  @@map("lessons")
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  progress     Float    @default(0.0) // 0.0 to 100.0
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  lastAccessed DateTime?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Activity {
  id          String      @id @default(cuid())
  userId      String
  lessonId    String?
  type        ActivityType
  title       String
  description String?
  points      Int         @default(0)
  isCompleted Boolean     @default(false)
  completedAt DateTime?
  dueDate     DateTime?
  createdAt   DateTime    @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson?     @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  
  @@map("activities")
}

model Achievement {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String
  icon        String   @default("üèÜ")
  points      Int      @default(0)
  unlockedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("achievements")
}

model Game {
  id          String   @id @default(cuid())
  title       String
  description String
  icon        String   @default("üéÆ")
  difficulty  String   @default("easy") // easy, medium, hard
  maxPoints   Int      @default(100)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  scores      GameScore[]
  
  @@map("games")
}

model GameScore {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  score     Int
  points    Int
  playedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@map("game_scores")
}

enum ActivityType {
  LESSON
  ASSIGNMENT
  QUIZ
  PROJECT
  READING
}